<% toName = to.name || 'result' -%>
<% if (to.cppClassName == "String") { -%>
<% if (typeof to.size != 'undefined') { -%>
  to = NanNew<String>(<%- toName %>, <%- to.size %>);
<% } else { -%>
  to = NanNew<String>(<%- toName %>);
<% } -%>
<% if (to.freeFunctionName) { -%>
  <%- to.freeFunctionName %>(<%- toName %>);
<% } -%>
<% } else if (isV8Value(to.cppClassName)) { -%>
  to = NanNew<<%- to.cppClassName %>>(<%- toName %>);
<% } else if (to.cppClassName == "External") { -%>
  to = External::New((void *)<%- toName %>);
<% } else if (to.cppClassName == 'Array') { -%>
<%
  // FIXME this is not general purpose enough.
%>
  Local<Array> tmpArray = Array::New(<%- toName %>-><%- to.size %>);
  for (unsigned int i = 0; i < <%- toName %>-><%- to.size %>; i++) {
    tmpArray->Set(Number::New(i), NanNew<String>(<%- toName %>-><%- to.key %>[i]));
  }
  to = tmpArray;
<% } else { -%>
<% if (to.copy) { -%>
  if (<%- toName %> != NULL) {
    <%- toName %> = (<%- to.cType.replace('**', '*') %> <% if (!/\*/.test(to.cType)) {%>*<% } %>)<%- to.copy %>(<%- toName %>);
  }
<% } -%>
  if (<%- toName %> != NULL) {
    to = <%- to.cppClassName %>::New((void *)<%- toName %>);
  } else {
    to = NanNew(NanNull());
  }
<% } -%>
